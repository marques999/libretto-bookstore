//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Libretto.StoreService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StoreService.IStoreService", CallbackContract=typeof(Libretto.StoreService.IStoreServiceCallback))]
    public interface IStoreService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/Login", ReplyAction="http://tempuri.org/IStoreService/LoginResponse")]
        Libretto.Model.Clerk Login(Libretto.Model.LoginTemplate loginForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/Login", ReplyAction="http://tempuri.org/IStoreService/LoginResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Clerk> LoginAsync(Libretto.Model.LoginTemplate loginForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/ListBooks", ReplyAction="http://tempuri.org/IStoreService/ListBooksResponse")]
        System.Collections.Generic.List<Libretto.Model.Book> ListBooks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/ListBooks", ReplyAction="http://tempuri.org/IStoreService/ListBooksResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Libretto.Model.Book>> ListBooksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/LookupBook", ReplyAction="http://tempuri.org/IStoreService/LookupBookResponse")]
        Libretto.Model.Book LookupBook(System.Guid bookIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/LookupBook", ReplyAction="http://tempuri.org/IStoreService/LookupBookResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Book> LookupBookAsync(System.Guid bookIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/InsertBook", ReplyAction="http://tempuri.org/IStoreService/InsertBookResponse")]
        Libretto.Model.Response InsertBook(Libretto.Model.Book bookInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/InsertBook", ReplyAction="http://tempuri.org/IStoreService/InsertBookResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> InsertBookAsync(Libretto.Model.Book bookInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/DeleteBook", ReplyAction="http://tempuri.org/IStoreService/DeleteBookResponse")]
        Libretto.Model.Response DeleteBook(Libretto.Model.Book bookInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/DeleteBook", ReplyAction="http://tempuri.org/IStoreService/DeleteBookResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> DeleteBookAsync(Libretto.Model.Book bookInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/UpdateBook", ReplyAction="http://tempuri.org/IStoreService/UpdateBookResponse")]
        Libretto.Model.Response UpdateBook(Libretto.Model.Book bookInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/UpdateBook", ReplyAction="http://tempuri.org/IStoreService/UpdateBookResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> UpdateBookAsync(Libretto.Model.Book bookInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/ListCustomers", ReplyAction="http://tempuri.org/IStoreService/ListCustomersResponse")]
        System.Collections.Generic.List<Libretto.Model.Customer> ListCustomers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/ListCustomers", ReplyAction="http://tempuri.org/IStoreService/ListCustomersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Libretto.Model.Customer>> ListCustomersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/LookupCustomer", ReplyAction="http://tempuri.org/IStoreService/LookupCustomerResponse")]
        Libretto.Model.Customer LookupCustomer(System.Guid customerIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/LookupCustomer", ReplyAction="http://tempuri.org/IStoreService/LookupCustomerResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Customer> LookupCustomerAsync(System.Guid customerIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/InsertCustomer", ReplyAction="http://tempuri.org/IStoreService/InsertCustomerResponse")]
        Libretto.Model.Response InsertCustomer(Libretto.Model.Customer customerInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/InsertCustomer", ReplyAction="http://tempuri.org/IStoreService/InsertCustomerResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> InsertCustomerAsync(Libretto.Model.Customer customerInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/ListPurchases", ReplyAction="http://tempuri.org/IStoreService/ListPurchasesResponse")]
        System.Collections.Generic.List<Libretto.Model.Purchase> ListPurchases();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/ListPurchases", ReplyAction="http://tempuri.org/IStoreService/ListPurchasesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Libretto.Model.Purchase>> ListPurchasesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/LookupPurchase", ReplyAction="http://tempuri.org/IStoreService/LookupPurchaseResponse")]
        Libretto.Model.Purchase LookupPurchase(System.Guid purchaseIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/LookupPurchase", ReplyAction="http://tempuri.org/IStoreService/LookupPurchaseResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Purchase> LookupPurchaseAsync(System.Guid purchaseIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/InsertPurchase", ReplyAction="http://tempuri.org/IStoreService/InsertPurchaseResponse")]
        Libretto.Model.Response InsertPurchase(Libretto.Model.OrderTemplate purchaseForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/InsertPurchase", ReplyAction="http://tempuri.org/IStoreService/InsertPurchaseResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> InsertPurchaseAsync(Libretto.Model.OrderTemplate purchaseForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/DeletePurchase", ReplyAction="http://tempuri.org/IStoreService/DeletePurchaseResponse")]
        Libretto.Model.Response DeletePurchase(Libretto.Model.Purchase purchaseInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/DeletePurchase", ReplyAction="http://tempuri.org/IStoreService/DeletePurchaseResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> DeletePurchaseAsync(Libretto.Model.Purchase purchaseInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/UpdatePurchase", ReplyAction="http://tempuri.org/IStoreService/UpdatePurchaseResponse")]
        Libretto.Model.Response UpdatePurchase(Libretto.Model.Purchase purchaseInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/UpdatePurchase", ReplyAction="http://tempuri.org/IStoreService/UpdatePurchaseResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> UpdatePurchaseAsync(Libretto.Model.Purchase purchaseInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/ListOrders", ReplyAction="http://tempuri.org/IStoreService/ListOrdersResponse")]
        System.Collections.Generic.List<Libretto.Model.Order> ListOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/ListOrders", ReplyAction="http://tempuri.org/IStoreService/ListOrdersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Libretto.Model.Order>> ListOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/LookupOrder", ReplyAction="http://tempuri.org/IStoreService/LookupOrderResponse")]
        Libretto.Model.Order LookupOrder(System.Guid orderIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/LookupOrder", ReplyAction="http://tempuri.org/IStoreService/LookupOrderResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Order> LookupOrderAsync(System.Guid orderIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/InsertOrder", ReplyAction="http://tempuri.org/IStoreService/InsertOrderResponse")]
        Libretto.Model.Response InsertOrder(Libretto.Model.OrderTemplate orderForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/InsertOrder", ReplyAction="http://tempuri.org/IStoreService/InsertOrderResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> InsertOrderAsync(Libretto.Model.OrderTemplate orderForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/DeleteOrder", ReplyAction="http://tempuri.org/IStoreService/DeleteOrderResponse")]
        Libretto.Model.Response DeleteOrder(Libretto.Model.Order orderInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/DeleteOrder", ReplyAction="http://tempuri.org/IStoreService/DeleteOrderResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> DeleteOrderAsync(Libretto.Model.Order orderInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/UpdateQuantity", ReplyAction="http://tempuri.org/IStoreService/UpdateQuantityResponse")]
        Libretto.Model.Response UpdateQuantity(Libretto.Model.Order orderInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/UpdateQuantity", ReplyAction="http://tempuri.org/IStoreService/UpdateQuantityResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> UpdateQuantityAsync(Libretto.Model.Order orderInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/Subscribe", ReplyAction="http://tempuri.org/IStoreService/SubscribeResponse")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/Subscribe", ReplyAction="http://tempuri.org/IStoreService/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/Unsubscribe", ReplyAction="http://tempuri.org/IStoreService/UnsubscribeResponse")]
        void Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/Unsubscribe", ReplyAction="http://tempuri.org/IStoreService/UnsubscribeResponse")]
        System.Threading.Tasks.Task UnsubscribeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStoreServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/UserAdded", ReplyAction="http://tempuri.org/IStoreService/UserAddedResponse")]
        void UserAdded();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStoreServiceChannel : Libretto.StoreService.IStoreService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StoreServiceClient : System.ServiceModel.DuplexClientBase<Libretto.StoreService.IStoreService>, Libretto.StoreService.IStoreService {
        
        public StoreServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public StoreServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public StoreServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public StoreServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public StoreServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public Libretto.Model.Clerk Login(Libretto.Model.LoginTemplate loginForm) {
            return base.Channel.Login(loginForm);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Clerk> LoginAsync(Libretto.Model.LoginTemplate loginForm) {
            return base.Channel.LoginAsync(loginForm);
        }
        
        public System.Collections.Generic.List<Libretto.Model.Book> ListBooks() {
            return base.Channel.ListBooks();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Libretto.Model.Book>> ListBooksAsync() {
            return base.Channel.ListBooksAsync();
        }
        
        public Libretto.Model.Book LookupBook(System.Guid bookIdentifier) {
            return base.Channel.LookupBook(bookIdentifier);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Book> LookupBookAsync(System.Guid bookIdentifier) {
            return base.Channel.LookupBookAsync(bookIdentifier);
        }
        
        public Libretto.Model.Response InsertBook(Libretto.Model.Book bookInformation) {
            return base.Channel.InsertBook(bookInformation);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> InsertBookAsync(Libretto.Model.Book bookInformation) {
            return base.Channel.InsertBookAsync(bookInformation);
        }
        
        public Libretto.Model.Response DeleteBook(Libretto.Model.Book bookInformation) {
            return base.Channel.DeleteBook(bookInformation);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> DeleteBookAsync(Libretto.Model.Book bookInformation) {
            return base.Channel.DeleteBookAsync(bookInformation);
        }
        
        public Libretto.Model.Response UpdateBook(Libretto.Model.Book bookInformation) {
            return base.Channel.UpdateBook(bookInformation);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> UpdateBookAsync(Libretto.Model.Book bookInformation) {
            return base.Channel.UpdateBookAsync(bookInformation);
        }
        
        public System.Collections.Generic.List<Libretto.Model.Customer> ListCustomers() {
            return base.Channel.ListCustomers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Libretto.Model.Customer>> ListCustomersAsync() {
            return base.Channel.ListCustomersAsync();
        }
        
        public Libretto.Model.Customer LookupCustomer(System.Guid customerIdentifier) {
            return base.Channel.LookupCustomer(customerIdentifier);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Customer> LookupCustomerAsync(System.Guid customerIdentifier) {
            return base.Channel.LookupCustomerAsync(customerIdentifier);
        }
        
        public Libretto.Model.Response InsertCustomer(Libretto.Model.Customer customerInformation) {
            return base.Channel.InsertCustomer(customerInformation);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> InsertCustomerAsync(Libretto.Model.Customer customerInformation) {
            return base.Channel.InsertCustomerAsync(customerInformation);
        }
        
        public System.Collections.Generic.List<Libretto.Model.Purchase> ListPurchases() {
            return base.Channel.ListPurchases();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Libretto.Model.Purchase>> ListPurchasesAsync() {
            return base.Channel.ListPurchasesAsync();
        }
        
        public Libretto.Model.Purchase LookupPurchase(System.Guid purchaseIdentifier) {
            return base.Channel.LookupPurchase(purchaseIdentifier);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Purchase> LookupPurchaseAsync(System.Guid purchaseIdentifier) {
            return base.Channel.LookupPurchaseAsync(purchaseIdentifier);
        }
        
        public Libretto.Model.Response InsertPurchase(Libretto.Model.OrderTemplate purchaseForm) {
            return base.Channel.InsertPurchase(purchaseForm);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> InsertPurchaseAsync(Libretto.Model.OrderTemplate purchaseForm) {
            return base.Channel.InsertPurchaseAsync(purchaseForm);
        }
        
        public Libretto.Model.Response DeletePurchase(Libretto.Model.Purchase purchaseInformation) {
            return base.Channel.DeletePurchase(purchaseInformation);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> DeletePurchaseAsync(Libretto.Model.Purchase purchaseInformation) {
            return base.Channel.DeletePurchaseAsync(purchaseInformation);
        }
        
        public Libretto.Model.Response UpdatePurchase(Libretto.Model.Purchase purchaseInformation) {
            return base.Channel.UpdatePurchase(purchaseInformation);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> UpdatePurchaseAsync(Libretto.Model.Purchase purchaseInformation) {
            return base.Channel.UpdatePurchaseAsync(purchaseInformation);
        }
        
        public System.Collections.Generic.List<Libretto.Model.Order> ListOrders() {
            return base.Channel.ListOrders();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Libretto.Model.Order>> ListOrdersAsync() {
            return base.Channel.ListOrdersAsync();
        }
        
        public Libretto.Model.Order LookupOrder(System.Guid orderIdentifier) {
            return base.Channel.LookupOrder(orderIdentifier);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Order> LookupOrderAsync(System.Guid orderIdentifier) {
            return base.Channel.LookupOrderAsync(orderIdentifier);
        }
        
        public Libretto.Model.Response InsertOrder(Libretto.Model.OrderTemplate orderForm) {
            return base.Channel.InsertOrder(orderForm);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> InsertOrderAsync(Libretto.Model.OrderTemplate orderForm) {
            return base.Channel.InsertOrderAsync(orderForm);
        }
        
        public Libretto.Model.Response DeleteOrder(Libretto.Model.Order orderInformation) {
            return base.Channel.DeleteOrder(orderInformation);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> DeleteOrderAsync(Libretto.Model.Order orderInformation) {
            return base.Channel.DeleteOrderAsync(orderInformation);
        }
        
        public Libretto.Model.Response UpdateQuantity(Libretto.Model.Order orderInformation) {
            return base.Channel.UpdateQuantity(orderInformation);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> UpdateQuantityAsync(Libretto.Model.Order orderInformation) {
            return base.Channel.UpdateQuantityAsync(orderInformation);
        }
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
    }
}
