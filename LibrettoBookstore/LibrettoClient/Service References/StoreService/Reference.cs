//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Libretto.StoreService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StoreService.IStoreService", CallbackContract=typeof(Libretto.StoreService.IStoreServiceCallback))]
    public interface IStoreService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/Login", ReplyAction="http://tempuri.org/IStoreService/LoginResponse")]
        Libretto.Model.Clerk Login(Libretto.Model.LoginTemplate loginForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/Login", ReplyAction="http://tempuri.org/IStoreService/LoginResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Clerk> LoginAsync(Libretto.Model.LoginTemplate loginForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetBooksList", ReplyAction="http://tempuri.org/IStoreService/GetBooksListResponse")]
        System.Collections.Generic.List<Libretto.Model.Book> GetBooksList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetBooksList", ReplyAction="http://tempuri.org/IStoreService/GetBooksListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Libretto.Model.Book>> GetBooksListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetBookById", ReplyAction="http://tempuri.org/IStoreService/GetBookByIdResponse")]
        Libretto.Model.Book GetBookById(string bookIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetBookById", ReplyAction="http://tempuri.org/IStoreService/GetBookByIdResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Book> GetBookByIdAsync(string bookIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/AddBook", ReplyAction="http://tempuri.org/IStoreService/AddBookResponse")]
        Libretto.Model.Response AddBook(Libretto.Model.Book bookInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/AddBook", ReplyAction="http://tempuri.org/IStoreService/AddBookResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> AddBookAsync(Libretto.Model.Book bookInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/DeleteBook", ReplyAction="http://tempuri.org/IStoreService/DeleteBookResponse")]
        Libretto.Model.Response DeleteBook(Libretto.Model.Book bookInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/DeleteBook", ReplyAction="http://tempuri.org/IStoreService/DeleteBookResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> DeleteBookAsync(Libretto.Model.Book bookInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/UpdateBook", ReplyAction="http://tempuri.org/IStoreService/UpdateBookResponse")]
        Libretto.Model.Response UpdateBook(Libretto.Model.Book bookInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/UpdateBook", ReplyAction="http://tempuri.org/IStoreService/UpdateBookResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> UpdateBookAsync(Libretto.Model.Book bookInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetCustomersList", ReplyAction="http://tempuri.org/IStoreService/GetCustomersListResponse")]
        System.Collections.Generic.List<Libretto.Model.Customer> GetCustomersList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetCustomersList", ReplyAction="http://tempuri.org/IStoreService/GetCustomersListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Libretto.Model.Customer>> GetCustomersListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetCustomerById", ReplyAction="http://tempuri.org/IStoreService/GetCustomerByIdResponse")]
        Libretto.Model.Customer GetCustomerById(string customerIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetCustomerById", ReplyAction="http://tempuri.org/IStoreService/GetCustomerByIdResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Customer> GetCustomerByIdAsync(string customerIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/AddCustomer", ReplyAction="http://tempuri.org/IStoreService/AddCustomerResponse")]
        Libretto.Model.Response AddCustomer(Libretto.Model.Customer customerInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/AddCustomer", ReplyAction="http://tempuri.org/IStoreService/AddCustomerResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> AddCustomerAsync(Libretto.Model.Customer customerInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/DeleteCustomer", ReplyAction="http://tempuri.org/IStoreService/DeleteCustomerResponse")]
        Libretto.Model.Response DeleteCustomer(Libretto.Model.Customer customerInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/DeleteCustomer", ReplyAction="http://tempuri.org/IStoreService/DeleteCustomerResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> DeleteCustomerAsync(Libretto.Model.Customer customerInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/UpdateCustomer", ReplyAction="http://tempuri.org/IStoreService/UpdateCustomerResponse")]
        Libretto.Model.Response UpdateCustomer(Libretto.Model.Customer customerInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/UpdateCustomer", ReplyAction="http://tempuri.org/IStoreService/UpdateCustomerResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> UpdateCustomerAsync(Libretto.Model.Customer customerInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetPurchasesList", ReplyAction="http://tempuri.org/IStoreService/GetPurchasesListResponse")]
        System.Collections.Generic.List<Libretto.Model.Purchase> GetPurchasesList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetPurchasesList", ReplyAction="http://tempuri.org/IStoreService/GetPurchasesListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Libretto.Model.Purchase>> GetPurchasesListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetPurchaseById", ReplyAction="http://tempuri.org/IStoreService/GetPurchaseByIdResponse")]
        Libretto.Model.Purchase GetPurchaseById(string purchaseIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetPurchaseById", ReplyAction="http://tempuri.org/IStoreService/GetPurchaseByIdResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Purchase> GetPurchaseByIdAsync(string purchaseIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/AddPurchase", ReplyAction="http://tempuri.org/IStoreService/AddPurchaseResponse")]
        Libretto.Model.Response AddPurchase(Libretto.Model.OrderTemplate purchaseForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/AddPurchase", ReplyAction="http://tempuri.org/IStoreService/AddPurchaseResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> AddPurchaseAsync(Libretto.Model.OrderTemplate purchaseForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/DeletePurchase", ReplyAction="http://tempuri.org/IStoreService/DeletePurchaseResponse")]
        Libretto.Model.Response DeletePurchase(Libretto.Model.Purchase purchaseInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/DeletePurchase", ReplyAction="http://tempuri.org/IStoreService/DeletePurchaseResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> DeletePurchaseAsync(Libretto.Model.Purchase purchaseInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/UpdatePurchase", ReplyAction="http://tempuri.org/IStoreService/UpdatePurchaseResponse")]
        Libretto.Model.Response UpdatePurchase(Libretto.Model.Purchase purchaseInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/UpdatePurchase", ReplyAction="http://tempuri.org/IStoreService/UpdatePurchaseResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> UpdatePurchaseAsync(Libretto.Model.Purchase purchaseInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetOrdersList", ReplyAction="http://tempuri.org/IStoreService/GetOrdersListResponse")]
        System.Collections.Generic.List<Libretto.Model.Order> GetOrdersList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetOrdersList", ReplyAction="http://tempuri.org/IStoreService/GetOrdersListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Libretto.Model.Order>> GetOrdersListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetOrderById", ReplyAction="http://tempuri.org/IStoreService/GetOrderByIdResponse")]
        Libretto.Model.Order GetOrderById(string orderIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetOrderById", ReplyAction="http://tempuri.org/IStoreService/GetOrderByIdResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Order> GetOrderByIdAsync(string orderIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetOrdersByUser", ReplyAction="http://tempuri.org/IStoreService/GetOrdersByUserResponse")]
        System.Collections.Generic.List<Libretto.Model.Order> GetOrdersByUser(string customerIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetOrdersByUser", ReplyAction="http://tempuri.org/IStoreService/GetOrdersByUserResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Libretto.Model.Order>> GetOrdersByUserAsync(string customerIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/InsertOrder", ReplyAction="http://tempuri.org/IStoreService/InsertOrderResponse")]
        Libretto.Model.Response InsertOrder(Libretto.Model.OrderTemplate orderForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/InsertOrder", ReplyAction="http://tempuri.org/IStoreService/InsertOrderResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> InsertOrderAsync(Libretto.Model.OrderTemplate orderForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/DeleteOrder", ReplyAction="http://tempuri.org/IStoreService/DeleteOrderResponse")]
        Libretto.Model.Response DeleteOrder(Libretto.Model.Order orderInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/DeleteOrder", ReplyAction="http://tempuri.org/IStoreService/DeleteOrderResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> DeleteOrderAsync(Libretto.Model.Order orderInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/UpdateOrder", ReplyAction="http://tempuri.org/IStoreService/UpdateOrderResponse")]
        Libretto.Model.Response UpdateOrder(Libretto.Model.Order orderInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/UpdateOrder", ReplyAction="http://tempuri.org/IStoreService/UpdateOrderResponse")]
        System.Threading.Tasks.Task<Libretto.Model.Response> UpdateOrderAsync(Libretto.Model.Order orderInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/Subscribe", ReplyAction="http://tempuri.org/IStoreService/SubscribeResponse")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/Subscribe", ReplyAction="http://tempuri.org/IStoreService/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/Unsubscribe", ReplyAction="http://tempuri.org/IStoreService/UnsubscribeResponse")]
        void Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/Unsubscribe", ReplyAction="http://tempuri.org/IStoreService/UnsubscribeResponse")]
        System.Threading.Tasks.Task UnsubscribeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStoreServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/UserAdded", ReplyAction="http://tempuri.org/IStoreService/UserAddedResponse")]
        void UserAdded();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStoreServiceChannel : Libretto.StoreService.IStoreService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StoreServiceClient : System.ServiceModel.DuplexClientBase<Libretto.StoreService.IStoreService>, Libretto.StoreService.IStoreService {
        
        public StoreServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public StoreServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public StoreServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public StoreServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public StoreServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public Libretto.Model.Clerk Login(Libretto.Model.LoginTemplate loginForm) {
            return base.Channel.Login(loginForm);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Clerk> LoginAsync(Libretto.Model.LoginTemplate loginForm) {
            return base.Channel.LoginAsync(loginForm);
        }
        
        public System.Collections.Generic.List<Libretto.Model.Book> GetBooksList() {
            return base.Channel.GetBooksList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Libretto.Model.Book>> GetBooksListAsync() {
            return base.Channel.GetBooksListAsync();
        }
        
        public Libretto.Model.Book GetBookById(string bookIdentifier) {
            return base.Channel.GetBookById(bookIdentifier);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Book> GetBookByIdAsync(string bookIdentifier) {
            return base.Channel.GetBookByIdAsync(bookIdentifier);
        }
        
        public Libretto.Model.Response AddBook(Libretto.Model.Book bookInformation) {
            return base.Channel.AddBook(bookInformation);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> AddBookAsync(Libretto.Model.Book bookInformation) {
            return base.Channel.AddBookAsync(bookInformation);
        }
        
        public Libretto.Model.Response DeleteBook(Libretto.Model.Book bookInformation) {
            return base.Channel.DeleteBook(bookInformation);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> DeleteBookAsync(Libretto.Model.Book bookInformation) {
            return base.Channel.DeleteBookAsync(bookInformation);
        }
        
        public Libretto.Model.Response UpdateBook(Libretto.Model.Book bookInformation) {
            return base.Channel.UpdateBook(bookInformation);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> UpdateBookAsync(Libretto.Model.Book bookInformation) {
            return base.Channel.UpdateBookAsync(bookInformation);
        }
        
        public System.Collections.Generic.List<Libretto.Model.Customer> GetCustomersList() {
            return base.Channel.GetCustomersList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Libretto.Model.Customer>> GetCustomersListAsync() {
            return base.Channel.GetCustomersListAsync();
        }
        
        public Libretto.Model.Customer GetCustomerById(string customerIdentifier) {
            return base.Channel.GetCustomerById(customerIdentifier);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Customer> GetCustomerByIdAsync(string customerIdentifier) {
            return base.Channel.GetCustomerByIdAsync(customerIdentifier);
        }
        
        public Libretto.Model.Response AddCustomer(Libretto.Model.Customer customerInformation) {
            return base.Channel.AddCustomer(customerInformation);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> AddCustomerAsync(Libretto.Model.Customer customerInformation) {
            return base.Channel.AddCustomerAsync(customerInformation);
        }
        
        public Libretto.Model.Response DeleteCustomer(Libretto.Model.Customer customerInformation) {
            return base.Channel.DeleteCustomer(customerInformation);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> DeleteCustomerAsync(Libretto.Model.Customer customerInformation) {
            return base.Channel.DeleteCustomerAsync(customerInformation);
        }
        
        public Libretto.Model.Response UpdateCustomer(Libretto.Model.Customer customerInformation) {
            return base.Channel.UpdateCustomer(customerInformation);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> UpdateCustomerAsync(Libretto.Model.Customer customerInformation) {
            return base.Channel.UpdateCustomerAsync(customerInformation);
        }
        
        public System.Collections.Generic.List<Libretto.Model.Purchase> GetPurchasesList() {
            return base.Channel.GetPurchasesList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Libretto.Model.Purchase>> GetPurchasesListAsync() {
            return base.Channel.GetPurchasesListAsync();
        }
        
        public Libretto.Model.Purchase GetPurchaseById(string purchaseIdentifier) {
            return base.Channel.GetPurchaseById(purchaseIdentifier);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Purchase> GetPurchaseByIdAsync(string purchaseIdentifier) {
            return base.Channel.GetPurchaseByIdAsync(purchaseIdentifier);
        }
        
        public Libretto.Model.Response AddPurchase(Libretto.Model.OrderTemplate purchaseForm) {
            return base.Channel.AddPurchase(purchaseForm);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> AddPurchaseAsync(Libretto.Model.OrderTemplate purchaseForm) {
            return base.Channel.AddPurchaseAsync(purchaseForm);
        }
        
        public Libretto.Model.Response DeletePurchase(Libretto.Model.Purchase purchaseInformation) {
            return base.Channel.DeletePurchase(purchaseInformation);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> DeletePurchaseAsync(Libretto.Model.Purchase purchaseInformation) {
            return base.Channel.DeletePurchaseAsync(purchaseInformation);
        }
        
        public Libretto.Model.Response UpdatePurchase(Libretto.Model.Purchase purchaseInformation) {
            return base.Channel.UpdatePurchase(purchaseInformation);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> UpdatePurchaseAsync(Libretto.Model.Purchase purchaseInformation) {
            return base.Channel.UpdatePurchaseAsync(purchaseInformation);
        }
        
        public System.Collections.Generic.List<Libretto.Model.Order> GetOrdersList() {
            return base.Channel.GetOrdersList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Libretto.Model.Order>> GetOrdersListAsync() {
            return base.Channel.GetOrdersListAsync();
        }
        
        public Libretto.Model.Order GetOrderById(string orderIdentifier) {
            return base.Channel.GetOrderById(orderIdentifier);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Order> GetOrderByIdAsync(string orderIdentifier) {
            return base.Channel.GetOrderByIdAsync(orderIdentifier);
        }
        
        public System.Collections.Generic.List<Libretto.Model.Order> GetOrdersByUser(string customerIdentifier) {
            return base.Channel.GetOrdersByUser(customerIdentifier);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Libretto.Model.Order>> GetOrdersByUserAsync(string customerIdentifier) {
            return base.Channel.GetOrdersByUserAsync(customerIdentifier);
        }
        
        public Libretto.Model.Response InsertOrder(Libretto.Model.OrderTemplate orderForm) {
            return base.Channel.InsertOrder(orderForm);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> InsertOrderAsync(Libretto.Model.OrderTemplate orderForm) {
            return base.Channel.InsertOrderAsync(orderForm);
        }
        
        public Libretto.Model.Response DeleteOrder(Libretto.Model.Order orderInformation) {
            return base.Channel.DeleteOrder(orderInformation);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> DeleteOrderAsync(Libretto.Model.Order orderInformation) {
            return base.Channel.DeleteOrderAsync(orderInformation);
        }
        
        public Libretto.Model.Response UpdateOrder(Libretto.Model.Order orderInformation) {
            return base.Channel.UpdateOrder(orderInformation);
        }
        
        public System.Threading.Tasks.Task<Libretto.Model.Response> UpdateOrderAsync(Libretto.Model.Order orderInformation) {
            return base.Channel.UpdateOrderAsync(orderInformation);
        }
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
    }
}
